{"version":3,"sources":["Components/header.js","Components/columns.js","Components/inquiry.js","Components/chart.js","API/GetData.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Columns","props","columnsObj","dimension","measure","columns","forEach","column","function","push","onDragStart","e","handleDragStart","name","draggable","Inquiry","inquiryObj","inquiry","item","onDragOver","handleDragOver","onDrop","handleDrop","onClick","handleClear","LineChart","mydata","i","details","length","label","data","values","labels","backgroundColor","Math","floor","random","toString","hoverBackgroundColor","datasets","options","scales","yAxes","ticks","beginAtZero","a","axios","get","response","post","App","dataTransfer","setData","preventDefault","getDetails","measures","filter","map","GetItem","then","setState","catch","err","console","log","state","getData","columnItem","inquiryItem","inquiryItems","type","GetColumns","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64181db7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            Plotter\r\n            <ul>\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n            </ul>\r\n        </header>\r\n    );\r\n}\r\n \r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Columns = (props) => {\r\n\r\n    let columnsObj = {\r\n        dimension: [],\r\n        measure: []\r\n    }\r\n\r\n    props.columns.forEach(column => {\r\n        columnsObj[column.function].push(\r\n              <div\r\n                  onDragStart={e => props.handleDragStart(e, column.name)}\r\n                  draggable\r\n                  className=\"draggable\"\r\n                  key={column.name}\r\n              >\r\n                  {column.name}\r\n              </div>\r\n          )\r\n    });\r\n\r\n    return (\r\n        <div className=\"columns\">\r\n            <h3>Columns</h3>\r\n            <div\r\n                className=\"dimension\">\r\n                {columnsObj.dimension}\r\n            </div>\r\n            <div\r\n                className=\"measure\">\r\n                {columnsObj.measure}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Columns;","import React from 'react';\r\n\r\nconst Inquiry = (props) => {\r\n\r\n    let inquiryObj = {\r\n        dimension: [],\r\n        measure: []\r\n    }\r\n\r\n    props.inquiry.forEach(item => {\r\n        inquiryObj[item.function].push(\r\n            <div\r\n                className=\"draggable\"\r\n                key={item.name}\r\n            >\r\n                {item.name}\r\n            </div>\r\n        )\r\n    });\r\n    return (\r\n        <div \r\n            onDragOver={e => props.handleDragOver(e)}\r\n            onDrop={e => props.handleDrop(e)}\r\n            className=\"inquiry\"\r\n        >\r\n            <div\r\n                className=\"inquiryDimension\">\r\n                <h3>Dimension</h3>\r\n                <div>\r\n                    {inquiryObj.dimension}\r\n                </div>\r\n                <button onClick={() => props.handleClear('dimension')}>Clear</button>\r\n            </div>\r\n            <div\r\n                className=\"inquiryMeasure\">\r\n                <h3>Measure</h3>\r\n                <div>\r\n                    {inquiryObj.measure}\r\n                </div>\r\n                <button onClick={() => props.handleClear('measure')}>Clear</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Inquiry;","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n\r\n\r\nconst LineChart = (props) => {\r\n    const mydata = [];\r\n    for(var i = 1; i < props.details.length; i++){\r\n        mydata.push({\r\n              label: props.details[i].name,\r\n              data: props.details[i].values,\r\n              labels: props.details[i].values,\r\n              backgroundColor: [\r\n                `#${Math.floor(Math.random()*16777215).toString(16)}`\r\n              ],\r\n              hoverBackgroundColor: [         \r\n                `#${Math.floor(Math.random()*16777215).toString(16)}`\r\n              ],\r\n              \"pointRadius\": 5,\r\n              \"pointHitRadius\": 5,\r\n              \"pointHoverRadius\": 4,\r\n            })\r\n        }\r\n    const data = {\r\n        labels: props.details[0].values,\r\n        datasets: mydata,\r\n      };\r\n      \r\n      const options = {\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: false,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      };\r\n\r\n    return (\r\n        <div className=\"chart\">\r\n            <Line data={data} options={options} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default LineChart;","import axios from 'axios';\r\n\r\n\r\n\r\nexport async function GetColumns() {\r\n    const response = await axios.get('https://plotter-task.herokuapp.com/columns');\r\n    return response;\r\n}\r\n\r\nexport async function GetItem(item) {\r\n    const response = await axios.post('https://plotter-task.herokuapp.com/data', item);\r\n    return response;\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport 'reset-css';\r\nimport Header from './Components/header'\r\nimport Columns from './Components/columns';\r\nimport Inquiry from './Components/inquiry';\r\nimport LineChart from './Components/chart'\r\nimport {GetColumns, GetItem} from './API/GetData';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columns: [],\r\n            inquiry: [],\r\n            details: []\r\n        };\r\n      }\r\n      componentDidMount() {\r\n        GetColumns()\r\n        .then(response => {\r\n          this.setState({columns: response.data})\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        });\r\n    }\r\n\r\n    handleDragStart = (e, name) => {\r\n        e.dataTransfer.setData(\"name\", name)\r\n    }\r\n        \r\n    handleDragOver = e => {\r\n        e.preventDefault();\r\n    }\r\n        \r\n    getDetails = (inquiry) => {\r\n        let measures = [];\r\n        let dimension = []\r\n        inquiry.filter(item => item.function === 'measure').map(item => measures.push(item.name));\r\n        inquiry.filter(item => item.function === 'dimension').map(item => dimension.push(item.name));\r\n        let data = {\"measures\": measures, \"dimension\": dimension[0]};\r\n        if (measures.length > 0 && dimension.length > 0) {\r\n            GetItem(data)\r\n            .then(response => {\r\n                this.setState({details: response.data})\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n        }\r\n    }\r\n\r\n    handleDrop = (e) => {\r\n        const {columns, inquiry} = this.state;\r\n        let name = e.dataTransfer.getData(\"name\");\r\n        let columnItem = columns.filter(column => {\r\n            return column.name !== name;\r\n        });\r\n        let inquiryItem = columns.filter(column => {\r\n            return column.name === name;\r\n        });\r\n        this.setState({columns: columnItem});\r\n\r\n        if(inquiryItem[0].function !== 'dimension') {\r\n            let inquiryItems = [...inquiry, inquiryItem[0]]\r\n            this.getDetails(inquiryItems)\r\n            this.setState({inquiry: inquiryItems});\r\n        } else {\r\n            this.setState({columns: [...columnItem, ...inquiry.filter(item => {\r\n                return item.function === 'dimension';\r\n            })]});\r\n            let inquiryItems = [...inquiry.filter(item => {\r\n            return item.function !== 'dimension';\r\n            }), inquiryItem[0]]\r\n            this.getDetails(inquiryItems)\r\n            this.setState({inquiry: inquiryItems});\r\n        }\r\n    }\r\n        \r\n    handleClear = (type) => {\r\n        const {columns, inquiry} = this.state;\r\n        if (type === 'dimension') {\r\n            this.setState({columns: [...columns, ...inquiry.filter(item => {\r\n                return item.function === 'dimension';\r\n            })]});\r\n            this.setState({inquiry: [...inquiry.filter(item => {\r\n                return item.function !== 'dimension';\r\n            })]});\r\n        } else {\r\n            this.setState({columns: [...columns, ...inquiry.filter(item => {\r\n                return item.function === 'measure';\r\n            })]});\r\n            this.setState({inquiry: [...inquiry.filter(item => {\r\n                return item.function !== 'measure';\r\n            })]});\r\n        }\r\n        this.setState({details: []})\r\n    }\r\n\r\n    render() {\r\n        const {columns, inquiry, details} = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <Header />\r\n                <Columns columns={columns} handleDragStart={this.handleDragStart} />\r\n                <div className=\"rightCol\">\r\n                    <Inquiry inquiry={inquiry} handleDragOver={this.handleDragOver} handleDrop={this.handleDrop} handleClear={this.handleClear} />\r\n                    {details.length > 0 ? <LineChart details={details} /> : ''}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}